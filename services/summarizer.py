# services/summarizer.py

import os
from dotenv import load_dotenv
from typing import List, Dict
from datetime import datetime
from langchain.prompts import (
    SystemMessagePromptTemplate,
    HumanMessagePromptTemplate,
    ChatPromptTemplate,
)
from langchain_openai import ChatOpenAI

# Try relative import for when running as module, fallback for standalone
try:
    from services.utils.datetime_utils import format_datetime_br
except ImportError:
    from utils.datetime_utils import format_datetime_br

# 1) Load environment and your summarization template
load_dotenv()
with open("configs/summarization_prompt.txt", "r", encoding="utf-8") as f:
    SUMMARY_PROMPT_TEMPLATE = f.read().strip()

def add_summaries(items: List[Dict]) -> List[Dict]:
    """
    Given a list of items (each dict has 'title', 'source', 'url', 'pubDate', 'body'),
    return a new list where each item also has:
      - 'summary' (string generated by LLM)
    The 'source' field is already present from the RSS feed parsing.
    """
    # Create the prompt template
    system_msg = SystemMessagePromptTemplate.from_template(SUMMARY_PROMPT_TEMPLATE)
    human_msg = HumanMessagePromptTemplate.from_template(
        "Title: {title}\nURL: {url}\n\nArticle text:\n{body}"
    )
    prompt = ChatPromptTemplate.from_messages([system_msg, human_msg])

    # Initialize the LLM
    llm = ChatOpenAI(
        temperature=0.0,
        model_name="gpt-4o-mini",
        openai_api_key=os.getenv("OPENAI_API_KEY"),
        streaming=False,
    )

    summarized: List[Dict] = []

    for item in items:
        # Prepare inputs for the prompt
        inputs = {
            "title": item["title"],
            "url": item["url"],
            "body": item["body"],
        }

        # Get the LLM's response
        response = llm.invoke(prompt.format_messages(**inputs))
        summary_text = response.content.strip()

        # Create new item by copying all existing fields except 'body'
        new_item = item.copy()  # First copy all fields
        new_item.pop('body', None)  # Remove body field if it exists
        new_item["pubDate"] = format_datetime_br(item["pubDate"])  # Format date
        new_item["summary"] = summary_text  # Add summary
        summarized.append(new_item)

    return summarized

if __name__ == "__main__":
    # Quick standalone test
    sample_items = [
        {
            "title": "Bitfarms forçada a interromper mineração de criptomoedas em seu data center na Argentina",
            "source": "Data Center Dynamics",
            "url": "https://www.datacenterdynamics.com/br/not%C3%ADcias/bitfarms-for%C3%A7ada-a-interromper-minera%C3%A7%C3%A3o-de-criptomoedas-em-seu-data-center-na-argentina/",
            "pubDate": datetime.utcnow(),
            "body": """A Bitfarms, uma das maiores empresas de mineração de Bitcoin de capital aberto, foi forçada a interromper todas as operações em Río Cuarto, Argentina.

A Bitfarms teve que cortar a energia em sua usina de 58 MW em Río Cuarto depois que a empresa local encarregada de fornecer energia para a instalação, a Generação Mediterránea SA (GMSA), foi forçada a pausar seu fornecimento de energia em meio a uma disputa de reestruturação de crédito.

Inaugurada em 2022, a usina de Río Cuarto, de 58 MW, é a segunda maior instalação de mineração de Bitcoin da Bitfarms na América do Sul, perdendo apenas para a usina de Paso Pe, de 70 MW, no Paraguai. Anunciada em 2021, a empresa disse na época que a usina argentina poderia oferecer até 210 MW em quatro edifícios assim que sua construção fosse concluída."""
        }
    ]
    result = add_summaries(sample_items)
    print("=== Summarization Output ===")
    for item in result:
        print(item)